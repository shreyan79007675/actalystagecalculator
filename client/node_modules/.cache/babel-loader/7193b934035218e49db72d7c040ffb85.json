{"ast":null,"code":"'use strict';\n\nconst dns = require('dns');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\n\nconst retrieveKerberos = require('../utils').retrieveKerberos;\n\nconst MongoError = require('../error').MongoError;\n\nconst kGssapiClient = Symbol('GSSAPI_CLIENT');\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  prepare(handshakeDoc, authContext, callback) {\n    const host = authContext.options.host;\n    const port = authContext.options.port;\n    const credentials = authContext.credentials;\n\n    if (!host || !port || !credentials) {\n      return callback(new MongoError(`Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${credentials ? 'host' : 'credentials'}.`));\n    }\n\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e);\n      }\n    }\n\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties['gssapiservicename'] || mechanismProperties['gssapiServiceName'] || 'mongodb';\n    performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {\n      if (err) return callback(err);\n      const initOptions = {};\n\n      if (password != null) {\n        Object.assign(initOptions, {\n          user: username,\n          password: password\n        });\n      }\n\n      kerberos.initializeClient(`${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`, initOptions, (err, client) => {\n        if (err) return callback(new MongoError(err));\n        if (client == null) return callback();\n        this[kGssapiClient] = client;\n        callback(undefined, handshakeDoc);\n      });\n    });\n  }\n\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (credentials == null) return callback(new MongoError('credentials required'));\n    const username = credentials.username;\n    const client = this[kGssapiClient];\n    if (client == null) return callback(new MongoError('gssapi client missing'));\n\n    function externalCommand(command, cb) {\n      return connection.command('$external.$cmd', command, cb);\n    }\n\n    client.step('', (err, payload) => {\n      if (err) return callback(err);\n      externalCommand(saslStart(payload), (err, response) => {\n        const result = response.result;\n        if (err) return callback(err);\n        negotiate(client, 10, result.payload, (err, payload) => {\n          if (err) return callback(err);\n          externalCommand(saslContinue(payload, result.conversationId), (err, response) => {\n            const result = response.result;\n            if (err) return callback(err);\n            finalize(client, username, result.payload, (err, payload) => {\n              if (err) return callback(err);\n              externalCommand({\n                saslContinue: 1,\n                conversationId: result.conversationId,\n                payload\n              }, (err, result) => {\n                if (err) return callback(err);\n                callback(undefined, result);\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = GSSAPI;\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\n\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\n\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err); // Adjust number of retries and call step again\n\n    if (err) return negotiate(client, retries - 1, payload, callback); // Return the payload\n\n    callback(undefined, response || '');\n  });\n}\n\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err); // Wrap the response\n\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err); // Return the payload\n\n      callback(undefined, wrapped);\n    });\n  });\n}\n\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  const canonicalizeHostName = typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean' ? mechanismProperties.gssapiCanonicalizeHostName : false;\n  if (!canonicalizeHostName) return callback(undefined, host); // Attempt to resolve the host name\n\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err); // Get the first resolve host id\n\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n\n    callback(undefined, host);\n  });\n}","map":{"version":3,"sources":["/Users/shreyanreddykarla/Desktop/FullStack_Calculator-master/node_modules/mongodb/lib/core/auth/gssapi.js"],"names":["dns","require","AuthProvider","retrieveKerberos","MongoError","kGssapiClient","Symbol","kerberos","GSSAPI","prepare","handshakeDoc","authContext","callback","host","options","port","credentials","e","username","password","mechanismProperties","serviceName","performGssapiCanonicalizeHostName","err","initOptions","Object","assign","user","initializeClient","process","platform","client","undefined","auth","connection","externalCommand","command","cb","step","payload","saslStart","response","result","negotiate","saslContinue","conversationId","finalize","module","exports","mechanism","autoAuthorize","retries","unwrap","wrap","wrapped","canonicalizeHostName","gssapiCanonicalizeHostName","resolveCname","r","Array","isArray","length"],"mappings":"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","sourcesContent":["'use strict';\nconst dns = require('dns');\n\nconst AuthProvider = require('./auth_provider').AuthProvider;\nconst retrieveKerberos = require('../utils').retrieveKerberos;\nconst MongoError = require('../error').MongoError;\n\nconst kGssapiClient = Symbol('GSSAPI_CLIENT');\nlet kerberos;\n\nclass GSSAPI extends AuthProvider {\n  prepare(handshakeDoc, authContext, callback) {\n    const host = authContext.options.host;\n    const port = authContext.options.port;\n    const credentials = authContext.credentials;\n    if (!host || !port || !credentials) {\n      return callback(\n        new MongoError(\n          `Connection must specify: ${host ? 'host' : ''}, ${port ? 'port' : ''}, ${\n            credentials ? 'host' : 'credentials'\n          }.`\n        )\n      );\n    }\n    if (kerberos == null) {\n      try {\n        kerberos = retrieveKerberos();\n      } catch (e) {\n        return callback(e);\n      }\n    }\n    const username = credentials.username;\n    const password = credentials.password;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName =\n      mechanismProperties['gssapiservicename'] ||\n      mechanismProperties['gssapiServiceName'] ||\n      'mongodb';\n    performGssapiCanonicalizeHostName(host, mechanismProperties, (err, host) => {\n      if (err) return callback(err);\n      const initOptions = {};\n      if (password != null) {\n        Object.assign(initOptions, { user: username, password: password });\n      }\n      kerberos.initializeClient(\n        `${serviceName}${process.platform === 'win32' ? '/' : '@'}${host}`,\n        initOptions,\n        (err, client) => {\n          if (err) return callback(new MongoError(err));\n          if (client == null) return callback();\n          this[kGssapiClient] = client;\n          callback(undefined, handshakeDoc);\n        }\n      );\n    });\n  }\n  auth(authContext, callback) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (credentials == null) return callback(new MongoError('credentials required'));\n    const username = credentials.username;\n    const client = this[kGssapiClient];\n    if (client == null) return callback(new MongoError('gssapi client missing'));\n    function externalCommand(command, cb) {\n      return connection.command('$external.$cmd', command, cb);\n    }\n    client.step('', (err, payload) => {\n      if (err) return callback(err);\n      externalCommand(saslStart(payload), (err, response) => {\n        const result = response.result;\n        if (err) return callback(err);\n        negotiate(client, 10, result.payload, (err, payload) => {\n          if (err) return callback(err);\n          externalCommand(saslContinue(payload, result.conversationId), (err, response) => {\n            const result = response.result;\n            if (err) return callback(err);\n            finalize(client, username, result.payload, (err, payload) => {\n              if (err) return callback(err);\n              externalCommand(\n                {\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                },\n                (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                }\n              );\n            });\n          });\n        });\n      });\n    });\n  }\n}\nmodule.exports = GSSAPI;\n\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n    // Wrap the response\n    client.wrap(response || '', { user }, (err, wrapped) => {\n      if (err) return callback(err);\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\nfunction performGssapiCanonicalizeHostName(host, mechanismProperties, callback) {\n  const canonicalizeHostName =\n    typeof mechanismProperties.gssapiCanonicalizeHostName === 'boolean'\n      ? mechanismProperties.gssapiCanonicalizeHostName\n      : false;\n  if (!canonicalizeHostName) return callback(undefined, host);\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(err);\n    // Get the first resolve host id\n    if (Array.isArray(r) && r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n    callback(undefined, host);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}